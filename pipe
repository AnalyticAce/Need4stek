/*
** EPITECH PROJECT, 2023
** test
** File description:
** s
*/

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>

/*int pipe(char ** av, char **env, char *str)
{
    char **map_re = without_space(str, '|');
    char **map2_re = without_space(map_re[0], ' ');
    if (map_re[1] != NULL) {
        int pfd[2];
        if (pipe(pfd) == -1)
        {
            printf("pipe failed\n");
            return 1;
        }

        int pid1, pid2;
        if ((pid1 = fork()) < 0)
        {
            printf("fork failed\n");
            return 2;
        }
        else if (pid1 == 0)
        {
            close(pfd[0]);
            dup2(pfd[1], STDOUT_FILENO);
            close(pfd[1]);
            char *const args[] = {"ls", "-l", NULL};
            char *const envp[] = {NULL};
            if (execve("/bin/ls", args, envp) == -1)
            {
                printf("ls failed\n");
                exit(3);
            }
        }
        else
        {
            if ((pid2 = fork()) < 0)
            {
                printf("fork failed\n");
                return 4;
            }
            else if (pid2 == 0)
            {
              
                close(pfd[1]);
                dup2(pfd[0], STDIN_FILENO);
                close(pfd[0]);
                char *const args[] = {"cat", "-e", NULL};
                char *const envp[] = {NULL};
                if (execve("/bin/cat", args, envp) == -1)
                {
                    printf("cat failed\n");
                    exit(5);
                }
            }
            else
            {
                close(pfd[0]);
                close(pfd[1]);
                waitpid(pid1, NULL, 0);
                waitpid(pid2, NULL, 0);
            }
        }
    }
    return 0;
}*/

char **without_space(char *str, char without);
int exe_redir(char **map2, char **env, char *str);
/*int piper(char **av, char **env, char *str)
{
    char **map_re = without_space(str, '|');
    char **map2_re = without_space(map_re[0], ' ');
    if (map_re[1] != NULL) {
        int pfd[2];
        if (pipe(pfd) == -1)
        {
            printf("pipe failed\n");
            return 1;
        }

        int pid1, pid2;
        if ((pid1 = fork()) < 0)
        {
            printf("fork failed\n");
            return 2;
        }
        else if (pid1 == 0)
        {
            close(pfd[0]);
            dup2(pfd[1], STDOUT_FILENO);
            close(pfd[1]);
            exe_redir(map2_re, env, str);
            exit(3);
        }
        else
        {
            if ((pid2 = fork()) < 0)
            {
                printf("fork failed\n");
                return 4;
            }
            else if (pid2 == 0)
            {
                close(pfd[1]);
                dup2(pfd[0], STDIN_FILENO);
                close(pfd[0]);
                char **map3_re = without_space(map_re[1], ' ');
                exe_redir(map3_re, env, map_re[1]);
                exit(5);
            }
            else
            {
                close(pfd[0]);
                close(pfd[1]);
                waitpid(pid1, NULL, 0);
                waitpid(pid2, NULL, 0);
            }
        }
    }
    return 0;
}*/



#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int count_pipes(char *str)
{
    int k = 0;
    for (int i = 0; str[i]; i++) {
        if (str[i] == '|') k++;
    }
    return k;
}

int piper(char **av, char **env, char *str)
{
    char **map_re = without_space(str, '|');
    int num_pipes = count_pipes(str);
    int i;

    int **pfd = malloc(sizeof(int *) * num_pipes);
    for (i = 0; i < num_pipes; i++) {
        pfd[i] = malloc(sizeof(int) * 2);
        if (pipe(pfd[i]) == -1) {
            printf("pipe failed\n");
            return 1;
        }
    }

    int pid;
    int prev_pipe[2];

    for (i = 0; i <= num_pipes; i++) {
        char **map2_re = without_space(map_re[i], ' ');

        if (i < num_pipes) {
            if (pipe(pfd[i]) == -1) {
                printf("pipe failed\n");
                return 1;
            }
        }

        if ((pid = fork()) < 0) {
            printf("fork failed\n");
            return 2;
        }
        else if (pid == 0) {
            /* Child process: execute the command */
            if (i > 0) {
                close(prev_pipe[1]);
                dup2(prev_pipe[0], STDIN_FILENO);
                close(prev_pipe[0]);
            }

            if (i < num_pipes) {
                close(pfd[i][0]);
                dup2(pfd[i][1], STDOUT_FILENO);
                close(pfd[i][1]);
            }

            exe_redir(map2_re, env, map_re[i]);
            exit(3);
        }
        else {
            /* Parent process */
            if (i > 0) {
                close(prev_pipe[0]);
                close(prev_pipe[1]);
            }

            if (i < num_pipes) {
                prev_pipe[0] = pfd[i][0];
                prev_pipe[1] = pfd[i][1];
            }

            waitpid(pid, NULL, 0);
        }
    }

    for (i = 0; i < num_pipes; i++) {
        free(pfd[i]);
    }
    free(pfd);

    return 0;
}
